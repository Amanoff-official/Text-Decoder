alphabet = (
    'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    'abcdefghijklmnopqrstuvwxyz'
    '0123456789'
    ' ,.!?:/'
)

# –ê–ª—Ñ–∞–≤–∏—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (—Å–º–∞–π–ª—ã)
cipher_alphabet = (
    'üòÄüòÉüòÑüòÅüòÜüòÖüòçüòÇüôÇüôÉüòâüòäüòáü•∞üòçü§©üòòüòó‚ò∫üòöüòôü•≤üòãüòõüòúü§™'
    'üòùü§ëü§óü§≠ü§´ü§îü§êü§®üòêüòëüò∂üòèüòíüôÑüò¨ü§•üòåüòîüò™ü§§üò¥üò∑ü§íü§ïü§¢ü§Æ'
    'üíñüíîüíòüíôüíöüíõüíúüñ§üíùü§ç'
    'ü§ùüåüüåàüéâ‚ùìü•Çü¶ù'
)

def generate_cipher_map(key):
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –∫–ª—é—á–∞ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
    key = ''.join(dict.fromkeys(key))  # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    full_alphabet = key + ''.join(ch for ch in alphabet if ch not in key)

    if len(full_alphabet) > len(cipher_alphabet):
        raise ValueError("(‚Äß_‚Äß?) Amanoff bilen habarla≈üy≈à..")
    
    return {original: encrypted for original, encrypted in zip(full_alphabet, cipher_alphabet)}

def encrypt_custom(plain_text, key):
    cipher_map = generate_cipher_map(key)
    encrypted_text = ''.join([cipher_map.get(char, char) for char in plain_text])
    return encrypted_text

def decrypt_custom(encrypted_text, key):
    cipher_map = generate_cipher_map(key)
    reverse_map = {v: k for k, v in cipher_map.items()}
    decrypted_text = ''.join([reverse_map.get(char, char) for char in encrypted_text])
    return decrypted_text

# –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª—é—á–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
plain_text = input("Gizlemeli teksty √Ωazy≈à: ")
key = input("Teksty gizlemek √º√ßin kody √Ωazy≈à: ")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∫–ª—é—á–∞ –∏ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
if len(key) == 0:
    print("Kod bo≈ü bolup bilenok.")
else:
    # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    encrypted = encrypt_custom(plain_text, key)
    print(f"Gizlenen kod: {encrypted}")
    print(f"Kody √Ωattan √ßykarma≈à: {key}")