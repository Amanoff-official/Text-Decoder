# –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏)
alphabet = (
    'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    'abcdefghijklmnopqrstuvwxyz'
    '0123456789'
    ' ,.!?:/'
)

# –ê–ª—Ñ–∞–≤–∏—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (—Å–º–∞–π–ª—ã)
cipher_alphabet = (
    'üòÄüòÉüòÑüòÅüòÜüòÖüòçüòÇüôÇüôÉüòâüòäüòáü•∞üòçü§©üòòüòó‚ò∫üòöüòôü•≤üòãüòõüòúü§™'
    'üòùü§ëü§óü§≠ü§´ü§îü§êü§®üòêüòëüò∂üòèüòíüôÑüò¨ü§•üòåüòîüò™ü§§üò¥üò∑ü§íü§ïü§¢ü§Æ'
    'üíñüíîüíòüíôüíöüíõüíúüñ§üíùü§ç'
    'ü§ùüåüüåàüéâ‚ùìü•Çü¶ù'
)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def generate_cipher_map(key):
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –∫–ª—é—á–∞ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
    key = ''.join(dict.fromkeys(key))  # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    full_alphabet = key + ''.join(ch for ch in alphabet if ch not in key)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞
    if len(full_alphabet) > len(cipher_alphabet):
        raise ValueError("(‚Äß_‚Äß?) Amanoff bilen habarla≈üy≈à.")
    
    return {original: encrypted for original, encrypted in zip(full_alphabet, cipher_alphabet)}

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
def decrypt_custom(encrypted_text, key):
    cipher_map = generate_cipher_map(key)
    reverse_map = {v: k for k, v in cipher_map.items()}
    decrypted_text = ''.join([reverse_map.get(char, char) for char in encrypted_text])
    return decrypted_text

# –ó–∞–ø—Ä–æ—Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª—é—á–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
encrypted_text = input("D√∂wmeli haty √Ωazy≈à: ")
key = input("Haty d√∂wmek √º√ßin kod √Ωazy≈à: ")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∫–ª—é—á–∞
if len(key) == 0:
    print("Kod bo≈ü bolup bilenok.")
else:
    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
    decrypted = decrypt_custom(encrypted_text, key)
    print(f"Decrypted Text: {decrypted}")
